{
    "Redux Reducer and Actions with Enum": {
      "prefix": "sale-action-enum",
      "body": [
        "import { ${1:CapsuleState} } from \"./CapsuleList\";",
        "// Define an enum for your action types",
        "export enum ${2:CapsuleActionType} {",
        "  CAPSULE_TOGGLE = \"CAPSULE_TOGGLE\",",
        "  OTHER_ACTION = \"OTHER_ACTION\",",
        "}",
        "",
        "export const ${3:capsuleListReducer} = (",
        "  state: ${1:CapsuleState},",
        "  action: ${4:CapsuleActionAction}",
        "): ${1:CapsuleState} => {",
        "  // ... reducer logic",
        "  console.log({ \"$$$ : \": action });",
        "  switch (action.type) {",
        "    case ${2:CapsuleActionType}.CAPSULE_TOGGLE:",
        "      return {",
        "        ...state,",
        "        expandedCapsule:",
        "          state.expandedCapsule === action.payload.capsuleId",
        "            ? undefined",
        "            : action.payload.capsuleId,",
        "      };",
        "    case ${2:CapsuleActionType}.OTHER_ACTION:",
        "      return {",
        "        ...state,",
        "        capsuleTitle: state.capsuleTitle + \"HHH\",",
        "      };",
        "    // Handle other actions...",
        "    default:",
        "      return state;",
        "  }",
        "};",
        "",
        "// Define the shape of your payload for each action",
        "type ${5:CapsuleTogglePayload} = {",
        "  capsuleId: string;",
        "};",
        "",
        "type ${6:OtherActionPayload} = {",
        "  id: string;",
        "};",
        "",
        "// Define action interfaces using the enum and payload types",
        "interface ${7:CapsuleToggleAction} {",
        "  type: ${2:CapsuleActionType}.CAPSULE_TOGGLE;",
        "  payload: ${5:CapsuleTogglePayload};",
        "}",
        "",
        "interface ${8:OtherAction} {",
        "  type: ${2:CapsuleActionType}.OTHER_ACTION;",
        "  payload: ${6:OtherActionPayload};",
        "}",
        "",
        "// Combine action interfaces into a union type for the reducer",
        "export type ${4:CapsuleActionAction} = ${7:CapsuleToggleAction} | ${8:OtherAction};",
        "",
        "// Utility function to determine if a capsule is expanded",
        "export const ${9:isCapsuleExpanded} = (state: ${1:CapsuleState}, capsuleId: string) =>",
        "  state.expandedCapsule === capsuleId;",
        "",
        "// Action to toggle the expanded state of a capsule",
        "export const ${10:toggleCapsule} = (capsuleId: string): ${4:CapsuleActionAction} => ({",
        "  type: ${2:CapsuleActionType}.CAPSULE_TOGGLE,",
        "  payload: { capsuleId: capsuleId },",
        "});",
        "",
        "// Action to perform other action",
        "export const ${11:otherAction} = (capsuleId: string): ${8:OtherAction} => ({",
        "  type: ${2:CapsuleActionType}.OTHER_ACTION,",
        "  payload: { id: capsuleId },",
        "});",
        ""
      ],
      "description": "Template for a Redux reducer and actions with types and enums"
    }
  }